// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`StrykerCli init should provide a meaningful help 1`] = `
"Usage: stryker init [options]

Initialize Stryker for your project

Options:
  -h, --help  display help for command
"
`;

exports[`StrykerCli run should provide a meaningful help 1`] = `
"Usage: stryker run [options] [configFile]

Arguments:
  configFile                                   Path to the config file

Options:
  -f, --files <allFiles>                       [DEPRECATED, you probably want to use \`--mutate\` or less likely \`--ignorePatterns\` instead] A comma separated list of patterns used for selecting ALL files needed to run the tests. That are NOT ONLY the files you want to actually mutate (which must be selected with \`--mutate\`), but instead also the other files you need too, like the files containing the tests, configuration files and such. Note: This option will have NO effect when using the --inPlace option. For a more detailed way of selecting input files, please use a configFile. Example: src/**/*.js,!src/index.js,a.js,test/**/*.js.
  --ignorePatterns <filesToIgnore>             A comma separated list of patterns used for specifying which files need to be ignored. This should only be used in cases where you experience a slow Stryker startup, because too many (or too large) files are copied to the sandbox that are not needed to run the tests. For example, image or movie directories. Note: This option will have NO effect when using the \`--inPlace\` option. The directories \`node_modules\`, \`.git\` and some others are always ignored. Example: \`--ignorePatterns dist\`. These patterns are ALWAYS ignored: [\`node_modules\`, \`.git\`, \`/reports\`, \`*.tsbuildinfo\`, \`/stryker.log\`, \`.stryker-tmp\`]. Because Stryker always ignores these, you should rarely have to adjust the \`ignorePatterns\` setting at all. This is useful to speed up Stryker by ignoring big directories/files you might have in your repo that has nothing to do with your code. For example, 1.5GB of movie/image files. Specify the patterns to all files or directories that are not used to run your tests and thus should NOT be copied to the sandbox directory for mutation testing. Each patterns in this array should be a [glob pattern](#usage-of-globbing-expressions-on-options). If a glob pattern starts with \`/\`, the pattern is relative to the current working directory. For example, \`/foo.js\` matches to \`foo.js\` but not \`subdir/foo.js\`. However to SELECT specific files TO BE mutated, you better use \`--mutate\`.
  --ignoreStatic                               Ignore static mutants. Static mutants are mutants which are only executed during the loading of a file.
  --incremental                                Enable 'incremental mode'. Stryker will store results in a file and use that file to speed up the next --incremental run
  --allowEmpty                                 Allows stryker to exit without any errors in cases where no tests are found 
  --incrementalFile <file>                     Specify the file to use for incremental mode.
  --force                                      Run all mutants, even if --incremental is provided and an incremental file exists. Can be used to force a rebuild of the incremental file.
  -m, --mutate <filesToMutate>                 With \`mutate\` you configure the subset of files or just one specific file to be mutated. These should be your _production code files_, and definitely not your test files. (Whereas with \`ignorePatterns\` you prevent non-relevant files from being copied to the sandbox directory in the first place)
  The default will try to guess your production code files based on sane defaults. It reads like this:
  - Include all js-like files inside the \`src\` or \`lib\` dir
  - Except files inside \`__tests__\` directories and file names ending with \`test\` or \`spec\`.
  If the defaults are not sufficient for you, for example in a angular project you might want to
  **exclude** not only the \`*.spec.ts\` files but other files too, just like the default already does.
  It is possible to specify exactly which code blocks to mutate by means of a _mutation range_. This can be done postfixing your file with \`:startLine[:startColumn]-endLine[:endColumn]\`. Example: src/index.js:1:3-1:5
  -b, --buildCommand <command>                 Configure a build command to run after mutating the code, but before mutants are tested. This is generally used to transpile your code before testing. Only configure this if your test runner doesn't take care of this already and you're not using just-in-time transpiler like \`babel/register\` or \`ts-node\`.
  --dryRunOnly                                 Execute the initial test run only, without doing actual mutation testing. Doing a dry run only can be used to test that StrykerJS can run your test setup, for example, in CI pipelines.
  --checkers <listOfCheckersOrEmptyString>     A comma separated list of checkers to use, for example --checkers typescript
  --checkerNodeArgs <listOfNodeArgs>           A list of node args to be passed to checker child processes.
  --coverageAnalysis <perTest|all|off>         The coverage analysis strategy you want to use. Default value: \\"perTest\\"
  --testRunner <name>                          The name of the test runner you want to use
  --testRunnerNodeArgs <listOfNodeArgs>        A comma separated list of node args to be passed to test runner child processes.
  --reporters <name>                           A comma separated list of the names of the reporter(s) you want to use
  --plugins <listOfPlugins>                    A list of plugins you want stryker to load (\`require\`).
  --appendPlugins <listOfPlugins>              A list of additional plugins you want Stryker to load (\`require\`) without overwriting the (default) \`plugins\`.
  --timeoutMS <number>                         Tweak the absolute timeout used to wait for a test runner to complete
  --timeoutFactor <number>                     Tweak the standard deviation relative to the normal test run of a mutated test
  --dryRunTimeoutMinutes <number>              Configure an absolute timeout for the initial test run. (It can take a while.)
  --maxConcurrentTestRunners <n>               Set the number of max concurrent test runner to spawn (default: cpuCount)
  -c, --concurrency <n>                        Set the concurrency of workers. Stryker will always run checkers and test runners in parallel by creating worker processes (default: cpuCount - 1)
  --disableBail                                Force the test runner to keep running tests, even when a mutant is already killed.
  --maxTestRunnerReuse <n>                     Restart each test runner worker process after \`n\` runs. Not recommended unless you are experiencing memory leaks that you are unable to resolve. Configuring \`0\` here means infinite reuse.
  --logLevel <level>                           Set the log level for the console. Possible values: fatal, error, warn, info, debug, trace and off. Default is \\"info\\"
  --fileLogLevel <level>                       Set the log level for the \\"stryker.log\\" file. Possible values: fatal, error, warn, info, debug, trace and off. Default is \\"off\\"
  --allowConsoleColors <true/false>            Indicates whether or not Stryker should use colors in console.
  --dashboard.project <name>                   Indicates which project name to use if the \\"dashboard\\" reporter is enabled. Defaults to the git url configured in the environment of your CI server.
  --dashboard.version <version>                Indicates which version to use if the \\"dashboard\\" reporter is enabled. Defaults to the branch name or tag name configured in the environment of your CI server.
  --dashboard.module <name>                    Indicates which module name to use if the \\"dashboard\\" reporter is enabled.
  --dashboard.baseUrl <url>                    Indicates which baseUrl to use when reporting to the stryker dashboard. Default: \\"https://dashboard.stryker-mutator.io/api/reports\\"
  --dashboard.reportType <full|mutationScore>  Send a full report (inc. source code and mutant results) or only the mutation score. Default: full
  --inPlace                                    Determines whether or not Stryker should mutate your files in place. Note: mutating your files in place is generally not needed for mutation testing, unless you have a dependency in your project that is really dependent on the file locations (like \\"app-root-path\\" for example).
  When \`true\`, Stryker will override your files, but it will keep a copy of the originals in the temp directory (using \`tempDirName\`) and it will place the originals back after it is done. Also with \`true\` the \`ignorePatterns\` has no effect any more.
  When \`false\` (default) Stryker will work in the copy of your code inside the temp directory.
  --tempDirName <name>                         Set the name of the directory that is used by Stryker as a working directory. This directory will be cleaned after a successful run
  --cleanTempDir <true | false | always>       Choose whether or not to clean the temp dir (which is \\".stryker-tmp\\" inside the current working directory by default) after a run.
  - false: Never delete the temp dir;
  - true: Delete the tmp dir after a successful run;
  - always: Always delete the temp dir, regardless of whether the run was successful.
  -h, --help                                   display help for command
"
`;

exports[`StrykerCli runServer [DEPRECATED] should provide a meaningful help 1`] = `
"Usage: stryker runServer [options] [configFile]

[DEPRECATED] use serve instead

Arguments:
  configFile                                   Path to the config file

Options:
  -f, --files <allFiles>                       [DEPRECATED, you probably want to use \`--mutate\` or less likely \`--ignorePatterns\` instead] A comma separated list of patterns used for selecting ALL files needed to run the tests. That are NOT ONLY the files you want to actually mutate (which must be selected with \`--mutate\`), but instead also the other files you need too, like the files containing the tests, configuration files and such. Note: This option will have NO effect when using the --inPlace option. For a more detailed way of selecting input files, please use a configFile. Example: src/**/*.js,!src/index.js,a.js,test/**/*.js.
  --ignorePatterns <filesToIgnore>             A comma separated list of patterns used for specifying which files need to be ignored. This should only be used in cases where you experience a slow Stryker startup, because too many (or too large) files are copied to the sandbox that are not needed to run the tests. For example, image or movie directories. Note: This option will have NO effect when using the \`--inPlace\` option. The directories \`node_modules\`, \`.git\` and some others are always ignored. Example: \`--ignorePatterns dist\`. These patterns are ALWAYS ignored: [\`node_modules\`, \`.git\`, \`/reports\`, \`*.tsbuildinfo\`, \`/stryker.log\`, \`.stryker-tmp\`]. Because Stryker always ignores these, you should rarely have to adjust the \`ignorePatterns\` setting at all. This is useful to speed up Stryker by ignoring big directories/files you might have in your repo that has nothing to do with your code. For example, 1.5GB of movie/image files. Specify the patterns to all files or directories that are not used to run your tests and thus should NOT be copied to the sandbox directory for mutation testing. Each patterns in this array should be a [glob pattern](#usage-of-globbing-expressions-on-options). If a glob pattern starts with \`/\`, the pattern is relative to the current working directory. For example, \`/foo.js\` matches to \`foo.js\` but not \`subdir/foo.js\`. However to SELECT specific files TO BE mutated, you better use \`--mutate\`.
  --ignoreStatic                               Ignore static mutants. Static mutants are mutants which are only executed during the loading of a file.
  --incremental                                Enable 'incremental mode'. Stryker will store results in a file and use that file to speed up the next --incremental run
  --allowEmpty                                 Allows stryker to exit without any errors in cases where no tests are found 
  --incrementalFile <file>                     Specify the file to use for incremental mode.
  --force                                      Run all mutants, even if --incremental is provided and an incremental file exists. Can be used to force a rebuild of the incremental file.
  -m, --mutate <filesToMutate>                 With \`mutate\` you configure the subset of files or just one specific file to be mutated. These should be your _production code files_, and definitely not your test files. (Whereas with \`ignorePatterns\` you prevent non-relevant files from being copied to the sandbox directory in the first place)
  The default will try to guess your production code files based on sane defaults. It reads like this:
  - Include all js-like files inside the \`src\` or \`lib\` dir
  - Except files inside \`__tests__\` directories and file names ending with \`test\` or \`spec\`.
  If the defaults are not sufficient for you, for example in a angular project you might want to
  **exclude** not only the \`*.spec.ts\` files but other files too, just like the default already does.
  It is possible to specify exactly which code blocks to mutate by means of a _mutation range_. This can be done postfixing your file with \`:startLine[:startColumn]-endLine[:endColumn]\`. Example: src/index.js:1:3-1:5
  -b, --buildCommand <command>                 Configure a build command to run after mutating the code, but before mutants are tested. This is generally used to transpile your code before testing. Only configure this if your test runner doesn't take care of this already and you're not using just-in-time transpiler like \`babel/register\` or \`ts-node\`.
  --dryRunOnly                                 Execute the initial test run only, without doing actual mutation testing. Doing a dry run only can be used to test that StrykerJS can run your test setup, for example, in CI pipelines.
  --checkers <listOfCheckersOrEmptyString>     A comma separated list of checkers to use, for example --checkers typescript
  --checkerNodeArgs <listOfNodeArgs>           A list of node args to be passed to checker child processes.
  --coverageAnalysis <perTest|all|off>         The coverage analysis strategy you want to use. Default value: \\"perTest\\"
  --testRunner <name>                          The name of the test runner you want to use
  --testRunnerNodeArgs <listOfNodeArgs>        A comma separated list of node args to be passed to test runner child processes.
  --reporters <name>                           A comma separated list of the names of the reporter(s) you want to use
  --plugins <listOfPlugins>                    A list of plugins you want stryker to load (\`require\`).
  --appendPlugins <listOfPlugins>              A list of additional plugins you want Stryker to load (\`require\`) without overwriting the (default) \`plugins\`.
  --timeoutMS <number>                         Tweak the absolute timeout used to wait for a test runner to complete
  --timeoutFactor <number>                     Tweak the standard deviation relative to the normal test run of a mutated test
  --dryRunTimeoutMinutes <number>              Configure an absolute timeout for the initial test run. (It can take a while.)
  --maxConcurrentTestRunners <n>               Set the number of max concurrent test runner to spawn (default: cpuCount)
  -c, --concurrency <n>                        Set the concurrency of workers. Stryker will always run checkers and test runners in parallel by creating worker processes (default: cpuCount - 1)
  --disableBail                                Force the test runner to keep running tests, even when a mutant is already killed.
  --maxTestRunnerReuse <n>                     Restart each test runner worker process after \`n\` runs. Not recommended unless you are experiencing memory leaks that you are unable to resolve. Configuring \`0\` here means infinite reuse.
  --logLevel <level>                           Set the log level for the console. Possible values: fatal, error, warn, info, debug, trace and off. Default is \\"info\\"
  --fileLogLevel <level>                       Set the log level for the \\"stryker.log\\" file. Possible values: fatal, error, warn, info, debug, trace and off. Default is \\"off\\"
  --allowConsoleColors <true/false>            Indicates whether or not Stryker should use colors in console.
  --dashboard.project <name>                   Indicates which project name to use if the \\"dashboard\\" reporter is enabled. Defaults to the git url configured in the environment of your CI server.
  --dashboard.version <version>                Indicates which version to use if the \\"dashboard\\" reporter is enabled. Defaults to the branch name or tag name configured in the environment of your CI server.
  --dashboard.module <name>                    Indicates which module name to use if the \\"dashboard\\" reporter is enabled.
  --dashboard.baseUrl <url>                    Indicates which baseUrl to use when reporting to the stryker dashboard. Default: \\"https://dashboard.stryker-mutator.io/api/reports\\"
  --dashboard.reportType <full|mutationScore>  Send a full report (inc. source code and mutant results) or only the mutation score. Default: full
  --inPlace                                    Determines whether or not Stryker should mutate your files in place. Note: mutating your files in place is generally not needed for mutation testing, unless you have a dependency in your project that is really dependent on the file locations (like \\"app-root-path\\" for example).
  When \`true\`, Stryker will override your files, but it will keep a copy of the originals in the temp directory (using \`tempDirName\`) and it will place the originals back after it is done. Also with \`true\` the \`ignorePatterns\` has no effect any more.
  When \`false\` (default) Stryker will work in the copy of your code inside the temp directory.
  --tempDirName <name>                         Set the name of the directory that is used by Stryker as a working directory. This directory will be cleaned after a successful run
  --cleanTempDir <true | false | always>       Choose whether or not to clean the temp dir (which is \\".stryker-tmp\\" inside the current working directory by default) after a run.
  - false: Never delete the temp dir;
  - true: Delete the tmp dir after a successful run;
  - always: Always delete the temp dir, regardless of whether the run was successful.
  -h, --help                                   display help for command
"
`;

exports[`StrykerCli serve should provide a meaningful help 1`] = `
"Usage: stryker serve [options] <channel> [-- <args>...]

Start the Stryker server

Arguments:
  channel             The channel to use for communicating with the Stryker
                      server (choices: \\"stdio\\", \\"socket\\")
  -- <args>           Override Stryker options here, (see run command)

Options:
  --port <number>     The port to listen on (only for socket channel)
  --address <string>  The host to listen on (only for socket channel) (default:
                      \\"localhost\\")
  -h, --help          display help for command
"
`;
