{"sourceFilePath":"/stryker/src/InputFileResolver.js","mutatorName":"BlockStatement","status":1,"replacement":"{\n}","location":{"start":{"line":7,"column":37},"end":{"line":88,"column":1}},"range":[285,4451],"originalLines":"var InputFileResolver = (function () {\r\n    function InputFileResolver(mutate, allFileExpressions) {\r\n        this.mutateFileExpressions = mutate || [];\r\n        this.inputFileDescriptors = allFileExpressions.map(function (maybePattern) {\r\n            if (InputFileResolver.isInputFileDescriptor(maybePattern)) {\r\n                return maybePattern;\r\n            }\r\n            else {\r\n                return _.assign({ pattern: maybePattern }, DEFAULT_INPUT_FILE_PROPERTIES);\r\n            }\r\n        });\r\n    }\r\n    InputFileResolver.prototype.resolve = function () {\r\n        var mutateFilePromise = this.resolveMutateFileGlobs();\r\n        return this.resolveInputFileGlobs().then(function (allInputFiles) { return mutateFilePromise.then(function (additionalMutateFiles) {\r\n            InputFileResolver.markAdditionalFilesToMutate(allInputFiles, additionalMutateFiles);\r\n            InputFileResolver.warnAboutNoFilesToMutate(allInputFiles);\r\n            return allInputFiles;\r\n        }); });\r\n    };\r\n    InputFileResolver.markAdditionalFilesToMutate = function (allInputFiles, additionalMutateFiles) {\r\n        var errors = [];\r\n        additionalMutateFiles.forEach(function (mutateFile) {\r\n            if (!allInputFiles.filter(function (inputFile) { return inputFile.path === mutateFile; }).length) {\r\n                errors.push(\"Could not find mutate file \\\"\" + mutateFile + \"\\\" in list of files.\");\r\n            }\r\n        });\r\n        if (errors.length > 0) {\r\n            throw new Error(errors.join(' '));\r\n        }\r\n        allInputFiles.forEach(function (file) { return file.mutated = additionalMutateFiles.some(function (mutateFile) { return mutateFile === file.path; }) || file.mutated; });\r\n    };\r\n    InputFileResolver.warnAboutNoFilesToMutate = function (allInputFiles) {\r\n        var mutateFiles = allInputFiles.filter(function (file) { return file.mutated; });\r\n        if (mutateFiles.length) {\r\n            log.info(\"Found \" + mutateFiles.length + \" file(s) to be mutated.\");\r\n        }\r\n        else {\r\n            log.warn(\"No files marked to be mutated, stryker will perform a dry-run without actually mutating anything.\");\r\n        }\r\n    };\r\n    InputFileResolver.reportEmptyGlobbingExpression = function (expression) {\r\n        log.warn(\"Globbing expression \\\"\" + expression + \"\\\" did not result in any files.\");\r\n    };\r\n    InputFileResolver.isInputFileDescriptor = function (maybeInputFileDescriptor) {\r\n        if (_.isObject(maybeInputFileDescriptor)) {\r\n            if (Object.keys(maybeInputFileDescriptor).indexOf('pattern') > -1) {\r\n                return true;\r\n            }\r\n            else {\r\n                throw Error(\"File descriptor \" + JSON.stringify(maybeInputFileDescriptor) + \" is missing mandatory property 'pattern'.\");\r\n            }\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    };\r\n    InputFileResolver.prototype.resolveMutateFileGlobs = function () {\r\n        return Promise.all(this.mutateFileExpressions.map(InputFileResolver.resolveFileGlob))\r\n            .then(function (files) { return _.flatten(files); });\r\n    };\r\n    InputFileResolver.prototype.resolveInputFileGlobs = function () {\r\n        return Promise.all(this.inputFileDescriptors.map(function (descriptor) { return InputFileResolver.resolveFileGlob(descriptor.pattern)\r\n            .then(function (sourceFiles) { return sourceFiles.map(function (sourceFile) { return InputFileResolver.createInputFile(sourceFile, descriptor); }); }); })).then(function (promises) { return _.flatten(promises); });\r\n    };\r\n    InputFileResolver.createInputFile = function (path, descriptor) {\r\n        var inputFile = _.assign({ path: path }, DEFAULT_INPUT_FILE_PROPERTIES, descriptor);\r\n        delete inputFile['pattern'];\r\n        return inputFile;\r\n    };\r\n    InputFileResolver.resolveFileGlob = function (expression) {\r\n        var _this = this;\r\n        return fileUtils_1.glob(expression).then(function (files) {\r\n            if (files.length === 0) {\r\n                _this.reportEmptyGlobbingExpression(expression);\r\n            }\r\n            fileUtils_1.normalize(files);\r\n            return files;\r\n        });\r\n    };\r\n    return InputFileResolver;\r\n}());","mutatedLines":"var InputFileResolver = (function () {\n}());"}