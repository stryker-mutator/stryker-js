{"path":"c:\\z\\github\\stryker-mutator\\stryker\\src\\TestRunnerOrchestrator.js","content":"\"use strict\";\r\nvar test_runner_1 = require('stryker-api/test_runner');\r\nvar StrykerTempFolder_1 = require('./utils/StrykerTempFolder');\r\nvar IsolatedTestRunnerAdapterFactory_1 = require('./isolated-runner/IsolatedTestRunnerAdapterFactory');\r\nvar path = require('path');\r\nvar os = require('os');\r\nvar _ = require('lodash');\r\nvar report_1 = require('stryker-api/report');\r\nvar log4js = require('log4js');\r\nvar objectUtils_1 = require('./utils/objectUtils');\r\nvar PromisePool = require('es6-promise-pool');\r\nvar log = log4js.getLogger('TestRunnerOrchestrator');\r\nvar TestRunnerOrchestrator = (function () {\r\n    function TestRunnerOrchestrator(options, files, testSelector, reporter) {\r\n        this.options = options;\r\n        this.files = files;\r\n        this.testSelector = testSelector;\r\n        this.reporter = reporter;\r\n    }\r\n    TestRunnerOrchestrator.prototype.initialRun = function () {\r\n        if (this.testSelector) {\r\n            return this.initialRunWithTestSelector();\r\n        }\r\n        else {\r\n            return this.initalRunWithoutTestSelector();\r\n        }\r\n    };\r\n    TestRunnerOrchestrator.prototype.initalRunWithoutTestSelector = function () {\r\n        var testRunner = this.createTestRunner(this.files, true);\r\n        return testRunner.run({ timeout: 10000 }).then(function (testResults) {\r\n            testRunner.dispose();\r\n            return [testResults];\r\n        });\r\n    };\r\n    TestRunnerOrchestrator.prototype.initialRunWithTestSelector = function () {\r\n        var testSelectionFilePath = this.createTestSelectorFileName(this.createTempFolder());\r\n        var runnerAdapter = this.createTestRunner(this.files, true, testSelectionFilePath);\r\n        var sandbox = {\r\n            runnerAdapter: runnerAdapter,\r\n            fileMap: null,\r\n            testSelectionFilePath: testSelectionFilePath,\r\n            index: 0\r\n        };\r\n        return this.runSingleTestsRecursive(sandbox, [], 0).then(function (testResults) {\r\n            runnerAdapter.dispose();\r\n            return testResults;\r\n        });\r\n    };\r\n    TestRunnerOrchestrator.prototype.runMutations = function (mutants) {\r\n        var _this = this;\r\n        mutants = _.clone(mutants); // work with a copy because we're changing state (pop'ing values)\r\n        var results = [];\r\n        return this.createTestRunnerSandboxes().then(function (sandboxes) {\r\n            var promiseProducer = function () {\r\n                if (mutants.length === 0) {\r\n                    return null; // we're done\r\n                }\r\n                else {\r\n                    var mutant = mutants.pop();\r\n                    if (mutant.scopedTestIds.length > 0) {\r\n                        var sandbox_1 = sandboxes.pop();\r\n                        var sourceFileCopy_1 = sandbox_1.fileMap[mutant.filename];\r\n                        return Promise.all([mutant.save(sourceFileCopy_1), _this.selectTestsIfPossible(sandbox_1, mutant.scopedTestIds)])\r\n                            .then(function () { return sandbox_1.runnerAdapter.run({ timeout: _this.calculateTimeout(mutant.timeSpentScopedTests) }); })\r\n                            .then(function (runResult) {\r\n                            var result = _this.collectFrozenMutantResult(mutant, runResult);\r\n                            results.push(result);\r\n                            _this.reporter.onMutantTested(result);\r\n                            return mutant.reset(sourceFileCopy_1);\r\n                        })\r\n                            .then(function () { return sandboxes.push(sandbox_1); }); // mark the runner as available again\r\n                    }\r\n                    else {\r\n                        var result = _this.collectFrozenMutantResult(mutant);\r\n                        results.push(result);\r\n                        return Promise.resolve(_this.reporter.onMutantTested(result));\r\n                    }\r\n                }\r\n            };\r\n            return new PromisePool(promiseProducer, sandboxes.length)\r\n                .start()\r\n                .then(function () { return sandboxes.forEach(function (testRunner) { return testRunner.runnerAdapter.dispose(); }); })\r\n                .then(function () { return _this.reportAllMutantsTested(results); })\r\n                .then(function () { return results; });\r\n        });\r\n    };\r\n    TestRunnerOrchestrator.prototype.reportAllMutantsTested = function (results) {\r\n        objectUtils_1.freezeRecursively(results);\r\n        this.reporter.onAllMutantsTested(results);\r\n    };\r\n    TestRunnerOrchestrator.prototype.calculateTimeout = function (baseTimeout) {\r\n        return (this.options.timeoutFactor * baseTimeout) + this.options.timeoutMs;\r\n    };\r\n    TestRunnerOrchestrator.prototype.collectFrozenMutantResult = function (mutant, runResult) {\r\n        var status;\r\n        var testNames;\r\n        if (runResult) {\r\n            switch (runResult.result) {\r\n                case test_runner_1.TestResult.Timeout:\r\n                    status = report_1.MutantStatus.TIMEDOUT;\r\n                    break;\r\n                case test_runner_1.TestResult.Error:\r\n                    log.debug('Converting a test result `error` to mutant status `killed`.');\r\n                    status = report_1.MutantStatus.KILLED;\r\n                    break;\r\n                case test_runner_1.TestResult.Complete:\r\n                    if (runResult.failed > 0) {\r\n                        status = report_1.MutantStatus.KILLED;\r\n                    }\r\n                    else {\r\n                        status = report_1.MutantStatus.SURVIVED;\r\n                    }\r\n                    break;\r\n            }\r\n            testNames = runResult.testNames;\r\n        }\r\n        else {\r\n            testNames = [];\r\n            status = report_1.MutantStatus.UNTESTED;\r\n        }\r\n        var result = {\r\n            sourceFilePath: mutant.filename,\r\n            mutatorName: mutant.mutatorName,\r\n            status: status,\r\n            replacement: mutant.replacement,\r\n            location: mutant.location,\r\n            range: mutant.range,\r\n            testsRan: testNames,\r\n            originalLines: mutant.originalLines,\r\n            mutatedLines: mutant.mutatedLines,\r\n        };\r\n        objectUtils_1.freezeRecursively(result);\r\n        return result;\r\n    };\r\n    TestRunnerOrchestrator.prototype.runSingleTestsRecursive = function (sandbox, runResults, currentTestIndex) {\r\n        var _this = this;\r\n        return new Promise(function (resolve) {\r\n            _this.selectTestsIfPossible(sandbox, [currentTestIndex])\r\n                .then(function () { return sandbox.runnerAdapter.run({ timeout: 10000 }); })\r\n                .then(function (runResult) {\r\n                if (runResult.result === test_runner_1.TestResult.Complete && runResult.succeeded > 0 || runResult.failed > 0) {\r\n                    runResults[currentTestIndex] = runResult;\r\n                    resolve(_this.runSingleTestsRecursive(sandbox, runResults, currentTestIndex + 1));\r\n                }\r\n                else {\r\n                    if (runResult.result !== test_runner_1.TestResult.Complete) {\r\n                        // If this was iteration n+1 (n = number of tests), the runResult.result will be Complete, so we don't record it\r\n                        runResults[currentTestIndex] = runResult;\r\n                    }\r\n                    sandbox.runnerAdapter.dispose();\r\n                    resolve(runResults);\r\n                }\r\n            });\r\n        });\r\n    };\r\n    TestRunnerOrchestrator.prototype.createTestRunnerSandboxes = function () {\r\n        var cpuCount = os.cpus().length;\r\n        var testRunnerSandboxes = [];\r\n        var allPromises = [];\r\n        log.info(\"Creating \" + cpuCount + \" test runners (based on cpu count)\");\r\n        for (var i = 0; i < cpuCount; i++) {\r\n            allPromises.push(this.createSandbox(i).then(function (sandbox) { return testRunnerSandboxes.push(sandbox); }));\r\n        }\r\n        return Promise.all(allPromises).then(function () { return testRunnerSandboxes; });\r\n    };\r\n    TestRunnerOrchestrator.prototype.selectTestsIfPossible = function (sandbox, ids) {\r\n        if (this.testSelector) {\r\n            var fileContent = this.testSelector.select(ids);\r\n            return StrykerTempFolder_1.default.writeFile(sandbox.testSelectionFilePath, fileContent);\r\n        }\r\n        else {\r\n            return Promise.resolve(void 0);\r\n        }\r\n    };\r\n    TestRunnerOrchestrator.prototype.createSandbox = function (index) {\r\n        var _this = this;\r\n        var tempFolder = this.createTempFolder();\r\n        return this.copyAllFilesToFolder(tempFolder).then(function (fileMap) {\r\n            var runnerFiles = [];\r\n            var testSelectionFilePath = null;\r\n            if (_this.testSelector) {\r\n                testSelectionFilePath = _this.createTestSelectorFileName(tempFolder);\r\n            }\r\n            _this.files.forEach(function (originalFile) { return runnerFiles.push({ path: fileMap[originalFile.path], shouldMutate: originalFile.shouldMutate }); });\r\n            return {\r\n                index: index,\r\n                fileMap: fileMap,\r\n                runnerAdapter: _this.createTestRunner(runnerFiles, false, testSelectionFilePath, index),\r\n                testSelectionFilePath: testSelectionFilePath\r\n            };\r\n        });\r\n    };\r\n    TestRunnerOrchestrator.prototype.createTempFolder = function () {\r\n        var tempFolder = StrykerTempFolder_1.default.createRandomFolder('test-runner-files');\r\n        log.debug('Creating a sandbox for files in %s', tempFolder);\r\n        return tempFolder;\r\n    };\r\n    TestRunnerOrchestrator.prototype.createTestSelectorFileName = function (folder) {\r\n        return path.join(folder, '___testSelection.js');\r\n    };\r\n    TestRunnerOrchestrator.prototype.copyAllFilesToFolder = function (folder) {\r\n        var _this = this;\r\n        return new Promise(function (resolve, reject) {\r\n            var fileMap = Object.create(null);\r\n            var cwd = process.cwd();\r\n            var copyPromises = _this.files.map(function (file) {\r\n                var relativePath = file.path.substr(cwd.length);\r\n                var folderName = StrykerTempFolder_1.default.ensureFolderExists(folder + path.dirname(relativePath));\r\n                var targetFile = path.join(folderName, path.basename(relativePath));\r\n                fileMap[file.path] = targetFile;\r\n                return StrykerTempFolder_1.default.copyFile(file.path, targetFile);\r\n            });\r\n            Promise.all(copyPromises).then(function () { resolve(fileMap); }, reject);\r\n        });\r\n    };\r\n    TestRunnerOrchestrator.prototype.createTestRunner = function (files, coverageEnabled, testSelectionFilePath, index) {\r\n        if (index === void 0) { index = 0; }\r\n        if (testSelectionFilePath) {\r\n            files = [{ path: testSelectionFilePath, shouldMutate: false }].concat(files);\r\n        }\r\n        var settings = {\r\n            coverageEnabled: coverageEnabled,\r\n            files: files,\r\n            strykerOptions: this.options,\r\n            port: this.options.port + index\r\n        };\r\n        log.debug(\"Creating test runner %s using settings {port: %s, coverageEnabled: %s}\", index, settings.port, settings.coverageEnabled);\r\n        return IsolatedTestRunnerAdapterFactory_1.default.create(settings);\r\n    };\r\n    return TestRunnerOrchestrator;\r\n}());\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.default = TestRunnerOrchestrator;\r\n//# sourceMappingURL=TestRunnerOrchestrator.js.map"}