{"path":"/stryker/src/Stryker.js","content":"'use strict';\r\nvar _ = require('lodash');\r\nvar MutatorOrchestrator_1 = require('./MutatorOrchestrator');\r\nvar config_1 = require('stryker-api/config');\r\nvar TestRunnerOrchestrator_1 = require('./TestRunnerOrchestrator');\r\nvar ReporterOrchestrator_1 = require('./ReporterOrchestrator');\r\nrequire('./jasmine_test_selector/JasmineTestSelector');\r\nvar test_runner_1 = require('stryker-api/test_runner');\r\nvar TestSelectorOrchestrator_1 = require('./TestSelectorOrchestrator');\r\nvar MutantRunResultMatcher_1 = require('./MutantRunResultMatcher');\r\nvar InputFileResolver_1 = require('./InputFileResolver');\r\nvar ConfigReader_1 = require('./ConfigReader');\r\nvar PluginLoader_1 = require('./PluginLoader');\r\nvar objectUtils_1 = require('./utils/objectUtils');\r\nvar StrykerTempFolder_1 = require('./utils/StrykerTempFolder');\r\nvar log4js = require('log4js');\r\nvar log = log4js.getLogger('Stryker');\r\nvar Stryker = (function () {\r\n    function Stryker(options) {\r\n        var configReader = new ConfigReader_1.default(options);\r\n        this.config = configReader.readConfig();\r\n        this.setGlobalLogLevel();\r\n        this.loadPlugins();\r\n        this.applyConfigWriters();\r\n        this.setGlobalLogLevel();\r\n        this.freezeConfig();\r\n    }\r\n    Stryker.prototype.runMutationTest = function () {\r\n        var _this = this;\r\n        var reporter = new ReporterOrchestrator_1.default(this.config).createBroadcastReporter();\r\n        var testSelector = new TestSelectorOrchestrator_1.default(this.config).determineTestSelector();\r\n        return new InputFileResolver_1.default(this.config.mutate, this.config.files).resolve()\r\n            .then(function (inputFiles) {\r\n            var testRunnerOrchestrator = new TestRunnerOrchestrator_1.default(_this.config, inputFiles, testSelector, reporter);\r\n            return testRunnerOrchestrator.initialRun().then(function (runResults) { return ({ runResults: runResults, inputFiles: inputFiles, testRunnerOrchestrator: testRunnerOrchestrator }); });\r\n        })\r\n            .then(function (tuple) {\r\n            var runResults = tuple.runResults;\r\n            var inputFiles = tuple.inputFiles;\r\n            var testRunnerOrchestrator = tuple.testRunnerOrchestrator;\r\n            var unsuccessfulTests = _this.filterOutUnsuccesfulResults(runResults);\r\n            if (unsuccessfulTests.length === 0) {\r\n                _this.logInitialTestRunSucceeded(runResults);\r\n                var mutatorOrchestrator = new MutatorOrchestrator_1.default(reporter);\r\n                var mutants = mutatorOrchestrator.generateMutants(inputFiles\r\n                    .filter(function (inputFile) { return inputFile.mutated; })\r\n                    .map(function (file) { return file.path; }));\r\n                log.info(mutants.length + \" Mutant(s) generated\");\r\n                var mutantRunResultMatcher = new MutantRunResultMatcher_1.default(mutants, runResults);\r\n                mutantRunResultMatcher.matchWithMutants();\r\n                return testRunnerOrchestrator.runMutations(mutants);\r\n            }\r\n            else {\r\n                _this.logFailedTests(unsuccessfulTests);\r\n                throw new Error('There were failed tests in the initial test run');\r\n            }\r\n        }).then(function (mutantResults) {\r\n            var maybePromise = reporter.wrapUp();\r\n            if (objectUtils_1.isPromise(maybePromise)) {\r\n                return maybePromise.then(function () { return mutantResults; });\r\n            }\r\n            else {\r\n                return mutantResults;\r\n            }\r\n        }).then(function (mutantResults) { return StrykerTempFolder_1.default.clean().then(function () { return mutantResults; }); });\r\n    };\r\n    Stryker.prototype.filterOutUnsuccesfulResults = function (runResults) {\r\n        return runResults.filter(function (runResult) { return !(!runResult.failed && runResult.result === test_runner_1.TestResult.Complete); });\r\n    };\r\n    Stryker.prototype.loadPlugins = function () {\r\n        if (this.config.plugins) {\r\n            new PluginLoader_1.default(this.config.plugins).load();\r\n        }\r\n    };\r\n    Stryker.prototype.applyConfigWriters = function () {\r\n        var _this = this;\r\n        config_1.ConfigWriterFactory.instance().knownNames().forEach(function (configWriterName) {\r\n            config_1.ConfigWriterFactory.instance().create(configWriterName, undefined).write(_this.config);\r\n        });\r\n    };\r\n    Stryker.prototype.freezeConfig = function () {\r\n        objectUtils_1.freezeRecursively(this.config);\r\n        if (log.isDebugEnabled()) {\r\n            log.debug(\"Using config: \" + JSON.stringify(this.config));\r\n        }\r\n    };\r\n    Stryker.prototype.logInitialTestRunSucceeded = function (runResults) {\r\n        var totalAmountOfTests = 0;\r\n        runResults.forEach(function (result) {\r\n            if (result.succeeded) {\r\n                totalAmountOfTests += result.succeeded;\r\n            }\r\n        });\r\n        log.info('Initial test run succeeded. Ran %s tests.', totalAmountOfTests);\r\n    };\r\n    Stryker.prototype.setGlobalLogLevel = function () {\r\n        log4js.setGlobalLogLevel(this.config.logLevel);\r\n    };\r\n    Stryker.prototype.logFailedTests = function (unsuccessfulTests) {\r\n        var failedSpecNames = _.uniq(_.flatten(unsuccessfulTests\r\n            .filter(function (runResult) { return runResult.result === test_runner_1.TestResult.Complete; })\r\n            .map(function (runResult) { return runResult.testNames; })))\r\n            .sort();\r\n        if (failedSpecNames.length > 0) {\r\n            var message_1 = 'One or more tests failed in the inial test run:';\r\n            failedSpecNames.forEach(function (filename) { return message_1 += \"\\n\\t\" + filename; });\r\n            log.error(message_1);\r\n        }\r\n        var errors = _.flatten(unsuccessfulTests\r\n            .filter(function (runResult) { return runResult.result === test_runner_1.TestResult.Error; })\r\n            .map(function (runResult) { return runResult.errorMessages; }))\r\n            .sort();\r\n        if (errors.length > 0) {\r\n            var message_2 = 'One or more tests errored in the initial test run:';\r\n            errors.forEach(function (error) { return message_2 += \"\\n\\t\" + error; });\r\n            log.error(message_2);\r\n        }\r\n    };\r\n    return Stryker;\r\n}());\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.default = Stryker;\r\n//# sourceMappingURL=Stryker.js.map"}