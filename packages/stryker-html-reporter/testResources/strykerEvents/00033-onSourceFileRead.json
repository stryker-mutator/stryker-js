{"path":"c:\\z\\github\\stryker-mutator\\stryker\\src\\utils\\StrykerTempFolder.js","content":"\"use strict\";\r\nvar fs = require('fs');\r\nvar path = require('path');\r\nvar mkdirp = require('mkdirp');\r\nvar baseTempFolder = path.join(process.cwd(), '.stryker-tmp');\r\nvar tempFolder = path.join(baseTempFolder, random().toString());\r\nensureFolderExists(baseTempFolder);\r\nensureFolderExists(tempFolder);\r\n/**\r\n * Creates a new random folder with the specified prefix.\r\n * @param prefix The prefix.\r\n * @returns The path to the folder.\r\n */\r\nfunction createRandomFolder(prefix) {\r\n    return ensureFolderExists(tempFolder + path.sep + prefix + random());\r\n}\r\n/**\r\n * Creates a random integer number.\r\n * @returns A random integer.\r\n */\r\nfunction random() {\r\n    return Math.ceil(Math.random() * 10000000);\r\n}\r\n/**\r\n * Creates a folder at the specified path if it doesn't already exist.\r\n * @param path The path to check.\r\n * @returns The path of the folder.\r\n */\r\nfunction ensureFolderExists(path) {\r\n    if (!fileOrFolderExists(path)) {\r\n        mkdirp.sync(path);\r\n    }\r\n    return path;\r\n}\r\n/**\r\n * Checks if a file or folder exists.\r\n * @param path The path to the file or folder.\r\n * @returns True if the file exists.\r\n */\r\nfunction fileOrFolderExists(path) {\r\n    try {\r\n        var stats = fs.lstatSync(path);\r\n        return true;\r\n    }\r\n    catch (error) {\r\n        return false;\r\n    }\r\n}\r\n/**\r\n * Writes data to a specified file.\r\n * @param filename The path to the file.\r\n * @param data The content of the file.\r\n * @returns A promise to eventually save the file.\r\n */\r\nfunction writeFile(filename, data) {\r\n    return new Promise(function (resolve, reject) {\r\n        fs.writeFile(filename, data, { encoding: 'utf8' }, function (error) {\r\n            if (error) {\r\n                reject(error);\r\n            }\r\n            else {\r\n                resolve();\r\n            }\r\n        });\r\n    });\r\n}\r\n/**\r\n * Copies a file.\r\n * @param fromFilename The path to the existing file.\r\n * @param toFilename The path to copy the file to.\r\n * @returns A promise to eventually copy the file.\r\n */\r\nfunction copyFile(fromFilename, toFilename) {\r\n    return new Promise(function (resolve, reject) {\r\n        var readStream = fs.createReadStream(fromFilename, { encoding: 'utf8' });\r\n        var writeStream = fs.createWriteStream(toFilename, { encoding: 'utf8' });\r\n        readStream.on('error', reject);\r\n        writeStream.on('error', reject);\r\n        readStream.pipe(writeStream);\r\n        readStream.on('end', function () { return resolve(); });\r\n    });\r\n}\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.default = {\r\n    createRandomFolder: createRandomFolder,\r\n    writeFile: writeFile,\r\n    copyFile: copyFile,\r\n    ensureFolderExists: ensureFolderExists\r\n};\r\n//# sourceMappingURL=StrykerTempFolder.js.map"}