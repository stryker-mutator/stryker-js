{"path":"/stryker/src/isolated-runner/IsolatedTestRunnerAdapter.js","content":"\"use strict\";\r\nvar test_runner_1 = require('stryker-api/test_runner');\r\nvar child_process_1 = require('child_process');\r\nvar Message_1 = require('./Message');\r\nvar _ = require('lodash');\r\nvar log4js = require('log4js');\r\nvar log = log4js.getLogger('IsolatedTestRunnerAdapter');\r\n/**\r\n * Runs the given test runner in a child process and forwards reports about test results\r\n * Also implements timeout-mechanisme (on timeout, restart the child runner and report timeout)\r\n */\r\nvar TestRunnerChildProcessAdapter = (function () {\r\n    function TestRunnerChildProcessAdapter(realTestRunnerName, options) {\r\n        this.realTestRunnerName = realTestRunnerName;\r\n        this.options = options;\r\n        this.startWorker();\r\n    }\r\n    TestRunnerChildProcessAdapter.prototype.startWorker = function () {\r\n        // Remove --debug-brk from process arguments. \r\n        // When debugging, it will try to reuse the same debug port, which will be taken by the main process.\r\n        var execArgv = _.clone(process.execArgv);\r\n        _.remove(execArgv, function (arg) { return arg.substr(0, 11) === '--debug-brk'; });\r\n        this.workerProcess = child_process_1.fork(__dirname + \"/IsolatedTestRunnerAdapterWorker\", [], { silent: true, execArgv: execArgv });\r\n        this.sendStartCommand();\r\n        this.listenToWorkerProcess();\r\n    };\r\n    TestRunnerChildProcessAdapter.prototype.listenToWorkerProcess = function () {\r\n        var _this = this;\r\n        if (this.workerProcess.stdout) {\r\n            var traceEnabled_1 = log.isTraceEnabled();\r\n            this.workerProcess.stdout.on('data', function (data) {\r\n                if (traceEnabled_1) {\r\n                    log.trace(data.toString());\r\n                }\r\n            });\r\n        }\r\n        if (this.workerProcess.stderr) {\r\n            this.workerProcess.stderr.on('data', function (data) {\r\n                log.error(data.toString());\r\n            });\r\n        }\r\n        this.workerProcess.on('message', function (message) {\r\n            _this.clearCurrentTimer();\r\n            switch (message.type) {\r\n                case Message_1.MessageType.Result:\r\n                    _this.handleResultMessage(message);\r\n                    break;\r\n                default:\r\n                    log.error(\"Retrieved unrecognized message from child process: \" + JSON.stringify(message));\r\n                    break;\r\n            }\r\n        });\r\n    };\r\n    TestRunnerChildProcessAdapter.prototype.run = function (options) {\r\n        var _this = this;\r\n        this.clearCurrentTimer();\r\n        if (options.timeout) {\r\n            this.markNoResultTimeout(options.timeout);\r\n        }\r\n        this.currentPromise = new Promise(function (resolve) {\r\n            _this.currentPromiseFulfillmentCallback = resolve;\r\n            _this.sendRunCommand(options);\r\n            _this.currentRunStartedTimestamp = new Date();\r\n        });\r\n        return this.currentPromise;\r\n    };\r\n    TestRunnerChildProcessAdapter.prototype.dispose = function () {\r\n        this.clearCurrentTimer();\r\n        this.workerProcess.kill();\r\n    };\r\n    TestRunnerChildProcessAdapter.prototype.sendRunCommand = function (options) {\r\n        var message = {\r\n            type: Message_1.MessageType.Run,\r\n            body: {\r\n                runOptions: options\r\n            }\r\n        };\r\n        this.workerProcess.send(message);\r\n    };\r\n    TestRunnerChildProcessAdapter.prototype.sendStartCommand = function () {\r\n        var startMessage = {\r\n            type: Message_1.MessageType.Start,\r\n            body: {\r\n                runnerName: this.realTestRunnerName,\r\n                runnerOptions: this.options\r\n            }\r\n        };\r\n        this.workerProcess.send(startMessage);\r\n    };\r\n    TestRunnerChildProcessAdapter.prototype.handleResultMessage = function (message) {\r\n        message.body.result.timeSpent = (new Date().getTime() - this.currentRunStartedTimestamp.getTime());\r\n        this.currentPromiseFulfillmentCallback(message.body.result);\r\n    };\r\n    TestRunnerChildProcessAdapter.prototype.clearCurrentTimer = function () {\r\n        if (this.currentTimeoutTimer) {\r\n            clearTimeout(this.currentTimeoutTimer);\r\n        }\r\n    };\r\n    TestRunnerChildProcessAdapter.prototype.markNoResultTimeout = function (timeoutMs) {\r\n        var _this = this;\r\n        this.currentTimeoutTimer = setTimeout(function () {\r\n            _this.handleTimeout();\r\n        }, timeoutMs);\r\n    };\r\n    TestRunnerChildProcessAdapter.prototype.handleTimeout = function () {\r\n        this.workerProcess.kill();\r\n        this.startWorker();\r\n        this.currentPromiseFulfillmentCallback({ result: test_runner_1.TestResult.Timeout });\r\n    };\r\n    return TestRunnerChildProcessAdapter;\r\n}());\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.default = TestRunnerChildProcessAdapter;\r\n//# sourceMappingURL=IsolatedTestRunnerAdapter.js.map"}