{"path":"c:\\z\\github\\stryker-mutator\\stryker\\src\\utils\\parserUtils.js","content":"\"use strict\";\r\nvar _ = require('lodash');\r\nvar esprima = require('esprima');\r\nvar escodegen = require('escodegen');\r\n/**\r\n * Utility class for parsing and generating code.\r\n * @constructor\r\n */\r\nvar esprimaOptions = {\r\n    comment: true,\r\n    loc: true,\r\n    range: true,\r\n    tokens: true,\r\n};\r\n/**\r\n * Parses code to generate an Abstract Syntax Tree.\r\n * @function\r\n * @param code - The code which has to be parsed.\r\n * @returns {Object} The generated Abstract Syntax Tree.\r\n */\r\nfunction parse(code) {\r\n    if (code === undefined) {\r\n        throw new Error('Code parameter cannot be undefined');\r\n    }\r\n    if (code === '') {\r\n        return {};\r\n    }\r\n    var abstractSyntaxTree = esprima.parse(code, esprimaOptions);\r\n    return abstractSyntaxTree;\r\n}\r\nexports.parse = parse;\r\n;\r\n/**\r\n * Finds all nodes which have a 'type' property and freezes them.\r\n * @function\r\n * @param abstractSyntaxTree - The current part of the abstract syntax tree which will be investigated.\r\n * @returns  All nodes with a type.\r\n */\r\nfunction collectFrozenNodes(abstractSyntaxTree, nodes) {\r\n    nodes = nodes || [];\r\n    if (!_.isArray(abstractSyntaxTree) && _.isObject(abstractSyntaxTree) && abstractSyntaxTree.type && _.isUndefined(abstractSyntaxTree.nodeID)) {\r\n        abstractSyntaxTree.nodeID = nodes.length;\r\n        nodes.push(abstractSyntaxTree);\r\n    }\r\n    Object.freeze(abstractSyntaxTree);\r\n    _.forOwn(abstractSyntaxTree, function (childNode, i) {\r\n        if (childNode instanceof Object && !(childNode instanceof Array)) {\r\n            collectFrozenNodes(childNode, nodes);\r\n        }\r\n        else if (childNode instanceof Array) {\r\n            _.forEach(childNode, function (arrayChild) {\r\n                if (arrayChild instanceof Object && !(arrayChild instanceof Array)) {\r\n                    collectFrozenNodes(arrayChild, nodes);\r\n                }\r\n            });\r\n        }\r\n    });\r\n    return nodes;\r\n}\r\nexports.collectFrozenNodes = collectFrozenNodes;\r\n;\r\n/**\r\n   * Parses a Node to generate code.\r\n   * @param The Node which has to be transformed into code.\r\n   * @returns The generated code.\r\n   */\r\nfunction generate(node) {\r\n    return escodegen.generate(node);\r\n}\r\nexports.generate = generate;\r\n;\r\n//# sourceMappingURL=parserUtils.js.map"}