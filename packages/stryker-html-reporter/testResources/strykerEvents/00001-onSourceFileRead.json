{"path":"c:\\z\\github\\stryker-mutator\\stryker\\src\\InputFileResolver.js","content":"\"use strict\";\r\nvar fileUtils_1 = require('./utils/fileUtils');\r\nvar _ = require('lodash');\r\nvar log4js = require('log4js');\r\nvar log = log4js.getLogger('InputFileResolver');\r\nvar InputFileResolver = (function () {\r\n    function InputFileResolver(mutateFileExpressions, allFileExpressions) {\r\n        this.mutateFileExpressions = mutateFileExpressions;\r\n        this.allFileExpressions = allFileExpressions;\r\n    }\r\n    InputFileResolver.prototype.resolve = function () {\r\n        var _this = this;\r\n        return new Promise(function (resolve, reject) {\r\n            var errors = [];\r\n            Promise.all([InputFileResolver.resolveFileGlobs(_this.mutateFileExpressions), InputFileResolver.resolveFileGlobs(_this.allFileExpressions)])\r\n                .then(function (files) {\r\n                var mutateFiles = files[0];\r\n                var allFiles = files[1];\r\n                fileUtils_1.normalize(allFiles);\r\n                fileUtils_1.normalize(mutateFiles);\r\n                mutateFiles.forEach(function (mutateFile) {\r\n                    if (allFiles.indexOf(mutateFile) < 0) {\r\n                        errors.push(\"Could not find mutate file \\\"\" + mutateFile + \"\\\" in list of files.\");\r\n                    }\r\n                });\r\n                if (errors.length > 0) {\r\n                    reject(errors);\r\n                }\r\n                else {\r\n                    resolve(allFiles.map(function (file) { return { path: file, shouldMutate: mutateFiles.some(function (mutateFile) { return mutateFile === file; }) }; }));\r\n                }\r\n            }, function (error) { return reject(error); });\r\n        });\r\n    };\r\n    InputFileResolver.reportEmptyGlobbingExpression = function (expression) {\r\n        log.warn(\"Globbing expression \\\"\" + expression + \"\\\" did not result in any files.\");\r\n    };\r\n    InputFileResolver.resolveFileGlobs = function (sourceExpressions) {\r\n        var _this = this;\r\n        return Promise.all(sourceExpressions.map(function (expression) { return fileUtils_1.glob(expression).then(function (files) {\r\n            if (files.length === 0) {\r\n                _this.reportEmptyGlobbingExpression(expression);\r\n            }\r\n            return files;\r\n        }); })).then(function (files) { return _.flatten(files); });\r\n    };\r\n    return InputFileResolver;\r\n}());\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.default = InputFileResolver;\r\n//# sourceMappingURL=InputFileResolver.js.map"}