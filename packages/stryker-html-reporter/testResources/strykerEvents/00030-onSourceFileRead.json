{"path":"/stryker/src/utils/fileUtils.js","content":"'use strict';\r\nvar _ = require('lodash');\r\nvar fs = require('fs');\r\nvar path = require('path');\r\nvar nodeGlob = require('glob');\r\nvar mkdirp = require('mkdirp');\r\n/**\r\n * Checks if a file or folder exists.\r\n * @function\r\n * @param path - The path to the file or folder.\r\n * @returns True if the file exists.\r\n */\r\nfunction fileOrFolderExistsSync(path) {\r\n    try {\r\n        var stats = fs.lstatSync(path);\r\n        return true;\r\n    }\r\n    catch (errror) {\r\n        return false;\r\n    }\r\n}\r\nexports.fileOrFolderExistsSync = fileOrFolderExistsSync;\r\n;\r\nfunction fileOrFolderExists(path) {\r\n    return new Promise(function (resolve) {\r\n        fs.lstat(path, function (error, stats) {\r\n            resolve(!error);\r\n        });\r\n    });\r\n}\r\nexports.fileOrFolderExists = fileOrFolderExists;\r\n/**\r\n * Reads a file.\r\n * @function\r\n * @param filename - The name of the file.\r\n * @returns The content of the file.\r\n */\r\nfunction readFile(filename) {\r\n    return fs.readFileSync(filename, 'utf8');\r\n}\r\nexports.readFile = readFile;\r\n;\r\n/**\r\n   * Normalizes the paths of a list of filenames.\r\n   * @param files - The list of filenames which have to be normalized.\r\n   */\r\nfunction normalize(files) {\r\n    _.forEach(files, function (file, key) {\r\n        files[key] = path.resolve(path.normalize(file));\r\n    });\r\n}\r\nexports.normalize = normalize;\r\n;\r\nfunction glob(expression) {\r\n    return new Promise(function (resolve, reject) {\r\n        nodeGlob(expression, function (error, matches) {\r\n            if (error) {\r\n                reject(error);\r\n            }\r\n            else {\r\n                resolve(matches);\r\n            }\r\n        });\r\n    });\r\n}\r\nexports.glob = glob;\r\nfunction readdir(path) {\r\n    return new Promise(function (resolve, reject) {\r\n        fs.readdir(path, function (error, files) {\r\n            if (error) {\r\n                reject(error);\r\n            }\r\n            else {\r\n                resolve(files);\r\n            }\r\n        });\r\n    });\r\n}\r\nexports.readdir = readdir;\r\nfunction stats(path) {\r\n    return new Promise(function (resolve, reject) {\r\n        fs.stat(path, function (error, stats) {\r\n            if (error) {\r\n                reject(error);\r\n            }\r\n            else {\r\n                resolve(stats);\r\n            }\r\n        });\r\n    });\r\n}\r\nfunction rmFile(path) {\r\n    return new Promise(function (fileResolve, fileReject) {\r\n        fs.unlink(path, function (error) {\r\n            if (error) {\r\n                fileReject(error);\r\n            }\r\n            else {\r\n                fileResolve();\r\n            }\r\n        });\r\n    });\r\n}\r\nfunction deleteDir(dirToDelete) {\r\n    return new Promise(function (resolve, reject) {\r\n        fileOrFolderExists(dirToDelete).then(function (exists) {\r\n            if (exists) {\r\n                readdir(dirToDelete).then(function (files) {\r\n                    var promisses = [];\r\n                    files.forEach(function (file) {\r\n                        var currentPath = path.join(dirToDelete, file);\r\n                        promisses.push(stats(currentPath).then(function (stats) {\r\n                            if (stats.isDirectory()) {\r\n                                // recurse\r\n                                return deleteDir(currentPath);\r\n                            }\r\n                            else {\r\n                                // delete file\r\n                                return rmFile(currentPath);\r\n                            }\r\n                        }));\r\n                    });\r\n                    Promise.all(promisses).then(function () { return resolve(); });\r\n                });\r\n            }\r\n            else {\r\n                resolve();\r\n            }\r\n        });\r\n    });\r\n}\r\nexports.deleteDir = deleteDir;\r\nfunction cleanFolder(folderName) {\r\n    return fileOrFolderExists(folderName)\r\n        .then(function (exists) {\r\n        if (exists) {\r\n            return deleteDir(folderName)\r\n                .then(function () { return mkdirRecursive(folderName); });\r\n        }\r\n        else {\r\n            return mkdirRecursive(folderName);\r\n        }\r\n    });\r\n}\r\nexports.cleanFolder = cleanFolder;\r\nfunction writeFile(fileName, content) {\r\n    return new Promise(function (resolve, reject) {\r\n        fs.writeFile(fileName, content, function (err) {\r\n            if (err) {\r\n                reject(err);\r\n            }\r\n            else {\r\n                resolve();\r\n            }\r\n        });\r\n    });\r\n}\r\nexports.writeFile = writeFile;\r\nfunction mkdirRecursive(folderName) {\r\n    if (!fileOrFolderExistsSync(folderName)) {\r\n        mkdirp.sync(folderName);\r\n    }\r\n}\r\nexports.mkdirRecursive = mkdirRecursive;\r\n/**\r\n * Wrapper around the 'require' function (for testability)\r\n */\r\nfunction importModule(moduleName) {\r\n    require(moduleName);\r\n}\r\nexports.importModule = importModule;\r\n//# sourceMappingURL=fileUtils.js.map"}