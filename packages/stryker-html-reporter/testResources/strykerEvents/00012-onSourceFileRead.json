{"path":"/stryker/src/MutatorOrchestrator.js","content":"\"use strict\";\r\nvar _ = require('lodash');\r\nvar BlockStatementMutator_1 = require('./mutators/BlockStatementMutator');\r\nvar ConditionalBoundaryMutator_1 = require('./mutators/ConditionalBoundaryMutator');\r\nvar MathMutator_1 = require('./mutators/MathMutator');\r\nvar RemoveConditionalsMutator_1 = require('./mutators/RemoveConditionalsMutator');\r\nvar ReverseConditionalMutator_1 = require('./mutators/ReverseConditionalMutator');\r\nvar UnaryOperatorMutator_1 = require('./mutators/UnaryOperatorMutator');\r\nvar mutant_1 = require('stryker-api/mutant');\r\nvar fileUtils = require('./utils/fileUtils');\r\nvar Mutant_1 = require('./Mutant');\r\nvar parserUtils = require('./utils/parserUtils');\r\nvar log4js = require('log4js');\r\nvar objectUtils_1 = require('./utils/objectUtils');\r\nvar log = log4js.getLogger('Mutator');\r\nvar MutatorOrchestrator = (function () {\r\n    function MutatorOrchestrator(reporter) {\r\n        var _this = this;\r\n        this.reporter = reporter;\r\n        this.mutators = [];\r\n        this.registerDefaultMutators();\r\n        var mutatorFactory = mutant_1.MutatorFactory.instance();\r\n        mutatorFactory.knownNames().forEach(function (name) { return _this.mutators.push(mutatorFactory.create(name, null)); });\r\n    }\r\n    MutatorOrchestrator.prototype.generateMutants = function (sourceFiles) {\r\n        var _this = this;\r\n        var mutants = [];\r\n        this.sourceFiles = [];\r\n        sourceFiles.forEach(function (sourceFile) {\r\n            try {\r\n                var fileContent = fileUtils.readFile(sourceFile);\r\n                _this.reportFileRead(sourceFile, fileContent);\r\n                var abstractSyntaxTree = parserUtils.parse(fileContent);\r\n                var nodes = parserUtils.collectFrozenNodes(abstractSyntaxTree);\r\n                var newMutants = _this.findMutants(sourceFile, fileContent, abstractSyntaxTree, nodes);\r\n                mutants = mutants.concat(newMutants);\r\n            }\r\n            catch (err) {\r\n                switch (err.code) {\r\n                    case 'ENOENT':\r\n                        log.info(\"Skipping file \" + err.path + \" because it does not exist\");\r\n                        break;\r\n                    default:\r\n                        console.log(err);\r\n                        throw err;\r\n                }\r\n            }\r\n        });\r\n        this.reportAllFilesRead();\r\n        return mutants;\r\n    };\r\n    ;\r\n    MutatorOrchestrator.prototype.reportFileRead = function (path, content) {\r\n        var fileToReport = { path: path, content: content };\r\n        objectUtils_1.freezeRecursively(fileToReport);\r\n        this.sourceFiles.push(fileToReport);\r\n        this.reporter.onSourceFileRead(fileToReport);\r\n    };\r\n    MutatorOrchestrator.prototype.reportAllFilesRead = function () {\r\n        objectUtils_1.freezeRecursively(this.sourceFiles);\r\n        this.reporter.onAllSourceFilesRead(this.sourceFiles);\r\n    };\r\n    MutatorOrchestrator.prototype.registerDefaultMutators = function () {\r\n        var mutatorFactory = mutant_1.MutatorFactory.instance();\r\n        mutatorFactory.register('BlockStatement', BlockStatementMutator_1.default);\r\n        mutatorFactory.register('ConditionalBoundary', ConditionalBoundaryMutator_1.default);\r\n        mutatorFactory.register('Math', MathMutator_1.default);\r\n        mutatorFactory.register('RemoveConditionals', RemoveConditionalsMutator_1.default);\r\n        mutatorFactory.register('ReverseConditional', ReverseConditionalMutator_1.default);\r\n        mutatorFactory.register('UnaryOperator', UnaryOperatorMutator_1.default);\r\n    };\r\n    MutatorOrchestrator.prototype.findMutants = function (sourceFile, originalCode, ast, nodes) {\r\n        var _this = this;\r\n        var mutants = [];\r\n        nodes.forEach(function (astnode) {\r\n            if (astnode.type) {\r\n                Object.freeze(astnode);\r\n                _this.mutators.forEach(function (mutator) {\r\n                    try {\r\n                        var mutatedNodes = mutator.applyMutations(astnode, function (node, deepClone) {\r\n                            return deepClone ? _.cloneDeep(node) : _.clone(node);\r\n                        });\r\n                        if (mutatedNodes.length > 0) {\r\n                            log.debug(\"The mutator '\" + mutator.name + \"' mutated \" + mutatedNodes.length + \" node\" + (mutatedNodes.length > 1 ? 's' : '') + \" between (Ln \" + astnode.loc.start.line + \", Col \" + astnode.loc.start.column + \") and (Ln \" + astnode.loc.end.line + \", Col \" + astnode.loc.end.column + \") in file \" + sourceFile);\r\n                        }\r\n                        mutatedNodes.forEach(function (mutatedNode) {\r\n                            var mutatedCode = parserUtils.generate(mutatedNode);\r\n                            var originalNode = nodes[mutatedNode.nodeID];\r\n                            mutants.push(new Mutant_1.default(mutator.name, sourceFile, originalCode, mutatedCode, originalNode.loc, originalNode.range));\r\n                        });\r\n                    }\r\n                    catch (error) {\r\n                        throw new Error(\"The mutator named '\" + mutator.name + \"' caused an error: \" + error);\r\n                    }\r\n                });\r\n            }\r\n        });\r\n        return mutants;\r\n    };\r\n    ;\r\n    return MutatorOrchestrator;\r\n}());\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.default = MutatorOrchestrator;\r\n//# sourceMappingURL=MutatorOrchestrator.js.map"}