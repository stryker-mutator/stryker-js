{"sourceFilePath":"/stryker/src/InputFileResolver.js","mutatorName":"BlockStatement","status":1,"replacement":"{\n}","location":{"start":{"line":13,"column":54},"end":{"line":33,"column":9}},"range":[553,1633],"originalLines":"        return new Promise(function (resolve, reject) {\r\n            var errors = [];\r\n            Promise.all([InputFileResolver.resolveFileGlobs(_this.mutateFileExpressions), InputFileResolver.resolveFileGlobs(_this.allFileExpressions)])\r\n                .then(function (files) {\r\n                var mutateFiles = files[0];\r\n                var allFiles = files[1];\r\n                fileUtils_1.normalize(allFiles);\r\n                fileUtils_1.normalize(mutateFiles);\r\n                mutateFiles.forEach(function (mutateFile) {\r\n                    if (allFiles.indexOf(mutateFile) < 0) {\r\n                        errors.push(\"Could not find mutate file \\\"\" + mutateFile + \"\\\" in list of files.\");\r\n                    }\r\n                });\r\n                if (errors.length > 0) {\r\n                    reject(errors);\r\n                }\r\n                else {\r\n                    resolve(allFiles.map(function (file) { return { path: file, shouldMutate: mutateFiles.some(function (mutateFile) { return mutateFile === file; }) }; }));\r\n                }\r\n            }, function (error) { return reject(error); });\r\n        });","mutatedLines":"        return new Promise(function (resolve, reject) {\n});"}